;;; prefab.el --- Project generation for Emacs -*- lexical-binding: t -*-

;; Author: Laurence Warne
;; Maintainer: Laurence Warne
;; Version: 0.1
;; Homepage: https://github.com/laurencewarne/prefab.el
;; Package-Requires: ((emacs "27.1") (f "0.2.0") (transient "0.3.0"))

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Emacs project generation

;;; Code:

(require 'python)
(require 'json)
(require 'f)

;;; Custom variables

(defgroup prefab nil
  "Emacs integration for cookiecutter."
  :group 'applications)

(defcustom prefab-cookiecutter-template-sources
  (list (format "%s/.cookiecutters" (getenv "HOME")))
  "List of directories to search for cookiecutter templates.")

(defcustom prefab-cookiecutter-output-dir
  (format "%s/projects" (getenv "HOME"))
  "Where to output projects generated by cookiecutter.")

(defcustom prefab-cookiecutter-python-executable
  python-shell-interpreter
  "The path of the python executable to invoke for cookiecutter code.")

;;; Constants

(defconst prefab-version "0.1.0")

;;; Internal variables

(defvar prefab-debug nil)

;;; Internal functions

(defun prefab--cookiecutter-context (template ctx-file)
  "Return the cookiecutter context for TEMPLATE CTX-FILE."
  (let ((src (format "from cookiecutter.config import get_user_config
from cookiecutter.generate import generate_context
from cookiecutter.replay import load
import json

config_dict = get_user_config()
try:
    ctx = load(config_dict['replay_dir'], '%s')
except:
    ctx = generate_context(
        context_file='%s',
        default_context=config_dict['default_context'],
    )
print(json.dumps(dict(ctx['cookiecutter'])))" template ctx-file)))
    (cl-remove-if (lambda (alist-entry)
                    (string-match-p "^_.*" (symbol-name (car alist-entry))))
                  (json-read-from-string
                   (shell-command-to-string
                    (format "%s -c \"%s\""
                            prefab-cookiecutter-python-executable src))))))

(defun prefab--cookiecutter-created-dir (template-dir ctx)
  "Return the created directory implied by TEMPLATE-DIR and CTX (an alist)."
  (print template-dir)
  (let* ((ctx-str (format "{'cookiecutter': %s}"
                          (prefab--alist-to-python-dict ctx)))
         (src (format "from cookiecutter.find import find_template
from cookiecutter.environment import StrictEnvironment
import os.path

ctx = %s
template_dir = find_template('%s')
dirname = os.path.split(template_dir)[1]
envvars = ctx.get('cookiecutter', {}).get('_jinja2_env_vars', {})
env = StrictEnvironment(context=ctx, keep_trailing_newline=True, **envvars)
output_dir = '%s'

name_tmpl = env.from_string(dirname)
rendered_dirname = name_tmpl.render(**ctx)
dir_to_create = os.path.normpath(os.path.join(output_dir, rendered_dirname))
print(dir_to_create, end='')"
                      ctx-str template-dir prefab-cookiecutter-output-dir)))
    (shell-command-to-string
     (format "%s -c \"%s\"" prefab-cookiecutter-python-executable src))))

(defun prefab--cookiecutter-download-template (template)
  "Download TEMPLATE and return the template directory."
  (let ((src (format "from cookiecutter.config import get_user_config
from cookiecutter.repository import determine_repo_dir

config_dict = get_user_config()
repo_dir, cleanup = determine_repo_dir(
    template='%s',
    abbreviations=config_dict['abbreviations'],
    clone_to_dir=config_dict['cookiecutters_dir'],
    checkout=None,
    no_input=False,
    #password=password,
    #directory=directory,
)
print(repo_dir, end='')" template)))
    (shell-command-to-string
     (format "%s -c \"%s\"" prefab-cookiecutter-python-executable src))))

(defun prefab--cookiecutter-existing-templates ()
  "Return a list of local templates."
  (mapcan #'f-directories prefab-cookiecutter-template-sources))

(defun prefab--alist-to-python-dict (alist)
  "Convert ALIST to a python dictionary (as a string)."
  (format "{%s}" (mapconcat #'identity (cl-loop for (key . value) in alist
                                                collect
                                                (format "'%s': '%s'" key value))
                            ", ")))

(defun prefab--run (args)
  "Run cookiecutter using ARGS."
  (interactive (list (transient-args transient-current-command)))
  (let* ((template (cadr (split-string (car args) "=")))
         (extra-args
          (mapconcat (lambda (s)
                       (replace-regexp-in-string "=\\(.*\\)$" "='\\1'" s))
                     (cdr args) " "))
         (cmd (format "cookiecutter %s --no-input --output-dir %s %s"
                      template cookiecutter-output-dir extra-args))
         (ctx-alist (mapcar (lambda (c) (let ((sp (split-string c "=")))
                                          (cons (car sp) (cadr sp))))
                            args)))
    (when prefab-debug (message "Running command %s" cmd))
    (let ((response (shell-command-to-string cmd)))
      (if (string-match-p "^Error:" response)
          (message response)
        (dired (prefab--cookiecutter-created-dir
                (f-join (car prefab-cookiecutter-template-sources) template)
                (mapcar (lambda (c) (if (string= (car c) "template")
                                        (cons "_template" (cdr c))
                                      c)) ctx-alist)))))))

(transient-define-prefix prefab--uri ()
  :value '("???=nonempty")
  ["Template"
   ("t" "name" "" read-string)]
  ["Context"
   ("?" "???" "" read-string)]
  ["Actions"
   ("c" "Create"    prefab--run)])

;;; Commands

(defun prefab ()
  "Generate a project from a template."
  (interactive)
  (let* ((templates (prefab--cookiecutter-existing-templates))
         (alist (mapcar (lambda (p) (cons (f-filename p) p)) templates))
         (template (completing-read "Template: " (mapcar #'f-filename templates)))
         (template-path (or (alist-get template alist nil nil #'string=)
                            (progn (message "Downloading template %s" template)
                                   (prefab--cookiecutter-download-template template))))
         (ctx-file (format "%s/cookiecutter.json" template-path))
         (ctx (prefab--cookiecutter-context template ctx-file))
         (options (cl-loop for (key-sym . value) in ctx
                           for key = (symbol-name key-sym)
                           collect
                           (list (substring key 0 1)
                                 (replace-regexp-in-string "[_-]+" " " key)
                                 (concat key "="))))
         (v-options (vconcat ["Context"] options))
         (template-options
          (vconcat ["Template"]
                   (list (list "t" "Template" (concat "template="))))))
    (transient-replace-suffix 'prefab--uri (list 0) template-options)
    (transient-replace-suffix 'prefab--uri (list 1) v-options)
    (oset (get 'prefab--uri 'transient--prefix)
          :value (cl-loop for (key . value)
                          in (cons (cons 'template template) ctx)
                          collect (format "%s=%s" (symbol-name key) value)))
    (prefab--uri)))

(provide 'prefab)

;;; prefab.el ends here
